---
import '@fontsource-variable/plus-jakarta-sans'
import '@fontsource-variable/kumbh-sans'
import Head from './Head.astro'
import Header from './Header.astro'
import Footer from './Footer.astro'
import { useStoryblokApi } from '@storyblok/astro'
import TitleHidden from '../atoms/TitleHidden.astro'
import Backdrop from '../blocks/Backdrop.astro'
import Modal from '../blocks/Modal.astro'
import ModalProduct from '../blocks/ModalProduct.astro'
import ModalAffiliate from '../blocks/ModalAffiliate.astro'
import { _products, _addProducts } from '../scripts/store'

const
    {
        pageTitle, pageDescription, pageThumbnail
    } = Astro.props,
    api = useStoryblokApi(),
    { data: settings } = await api.get('cdn/stories/settings', {
        version: import.meta.env.DEV ? 'draft' : 'published',
        resolve_links: 'url'
    }),
    site = settings.story.content

let
    { data: addedProducts } = await api.get(`cdn/stories/products`, {
        version: import.meta.env.DEV ? 'draft' : 'published',
    }),
    products = addedProducts.story.content.body
        .map((el: any) => el.products)[1]
        .filter((el: any) => el.in_stock)
        .sort((a: any, b: any) => (b.is_new - a.is_new))

_addProducts(products)
---
<!doctype html>
<html
    lang="en"
    class="scroll-smooth bg-white">
	<Head
        title={ `${ pageTitle } | ${ site.title }` }
        description={ pageDescription || site.description }
        image={ pageThumbnail || '/og-image.webp' }
    />
	<body
        class="text-surface-700 bg-white flex min-h-svh lg:min-h-dvh flex-col group/modal"
        data-body-exit>
        <Header
            title={ site.title }
            contactActions={ site.contact_actions[0].links }
            topnavLinks={ site.topnav }
        />
		<main
            class="flex-1 swup-in pt-14 lg:pt-16"
            id="swup"
            tabindex="-1">
            <TitleHidden title={ pageTitle }/>
            <slot/>
        </main>
        <Footer
            legalName={ site.legalName }
            legalLinks={ site.legalnav }
            social={ site.social }
            actions={ site.cta }
        />
        <Modal>
            { _products.value.map((el: any, idx: number) => (
                <ModalProduct product={ el } data-modal-display={ `product-at-${idx}` }/>
            )) }
            <ModalAffiliate data-modal-display="affiliate"/>
        </Modal>
        <Backdrop/>
	</body>
</html>

<style is:global>
	html.is-changing .swup-in { @apply opacity-100 duration-[.4s] ease-[cubic-bezier(0,0.16,0,1)]; }
	html.is-animating .swup-in { @apply opacity-0 scale-[.9999] translate-y-3 ease-in; }
	.swup-progress-bar { @apply h-0.5 bg-accent-600 dark:bg-accent-300; }
	main:focus { outline: none; }
    button { text-align: inherit; }
	svg { @apply flex-shrink-0 pointer-events-none fill-current; }
</style>

<script>
	import Swup from 'swup'
    import _activePath from '../scripts/active-path'
    import _flipper from '../scripts/flipper'
    import _intoView from '../scripts/into-view'
    import _astrolog from '../scripts/astrolog'
    import _modal from '../scripts/modal'
    import _backdrop from '../scripts/backdrop'

	const swup = new Swup({
		animationSelector: '[class*="swup-"]'
	})

	document.addEventListener('DOMContentLoaded', () => {
		once()
        init()
	})
	swup.hooks.on('page:view', () => init())

	function init() {
        // run on page load and every page swaps
        _activePath()
        _intoView()
        _flipper()
        _modal()
        _backdrop()
	}

	function once() {
		// run only on page load
        _astrolog()
	}
</script>