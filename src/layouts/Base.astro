---
import Head from '@layouts/Head.astro'
import Header from '@layouts/Header.astro'
import Footer from '@layouts/Footer.astro'
import { useStoryblokApi } from '@storyblok/astro'
import TitleHidden from '@blocks/TitleHidden.astro'
import Backdrop from '@blocks/Backdrop.astro'
import Modal from '@blocks/Modal.astro'
import ModalProduct from '@blocks/ModalProduct.astro'
import ModalAffiliate from '@blocks/ModalAffiliate.astro'
import {
	_products,
	_addProducts,
	_addProductsNew,
	_productsNew,
	_affiliates,
	_addAffiliates,
	_partners,
	_addPartners,
	// TO-DO revert to fetching dynamic
	_productsByd,
	_addProductsByd,
} from '@scripts/store'
import Toast from '@blocks/Toast.astro'
import Sheet from '@blocks/Sheet.astro'
import NavMobile from '@blocks/NavMobile.astro'

const { pageTitle, pageDescription, pageThumbnail, showNav, isError } =
		Astro.props,
	api = useStoryblokApi(),
	{ data: settings } = await api.get('cdn/stories/settings', {
		version: import.meta.env.DEV ? 'draft' : 'published',
		resolve_links: 'url',
	}),
	site = settings.story.content,
	noActions = ['/repair-center'],
	{ pathname } = Astro.url,
	showActions = noActions.includes(pathname.replace(/\.html$/, ''))

let { data: dataProducts } = await api.get(`cdn/stories/products`, {
		version: import.meta.env.DEV ? 'draft' : 'published',
	}),
	products = dataProducts.story.content.body
		.filter((el) => el.component === 'products')[0]
		.products.filter((el) => el.in_stock)
		.sort((a: any, b: any) => b.is_new - a.is_new),
	{ data: dataAffiliates } = await api.get(`cdn/stories/affiliates`, {
		version: import.meta.env.DEV ? 'draft' : 'published',
		resolve_links: 'url',
	}),
	affiliates = dataAffiliates.story.content.body
		.filter((el) => el.component === 'affiliates')[0]
		.affiliates.filter((el) => el.available),
	{ data: dataPartners } = await api.get(`cdn/stories/partners`, {
		version: import.meta.env.DEV ? 'draft' : 'published',
	}),
	partners = dataPartners.story.content.body.filter(
		(el) => el.component === 'solar_array',
	)[0],
	{ data: productsByd } = await api.get(`cdn/stories`, {
		is_startpage: false,
		starts_with: 'products/',
        resolve_relations: 'product.partner',
		version: import.meta.env.DEV ? 'draft' : 'published',
	})

_addProducts(products)
_addProductsNew(products.filter((el) => el.is_new))
_addAffiliates(affiliates)
_addPartners(partners)
// TO-DO Revert to fetching dynamic
_addProductsByd(productsByd)
---

<!doctype html>
<html lang='en' class='scroll-smooth bg-white'>
	<Head
		title={`${pageTitle} | ${site.title}`}
		description={pageDescription || site.description}
		image={pageThumbnail || '/thumbnail.png'}
	/>
	<body
		class='text-surface-700 bg-white flex min-h-svh lg:min-h-dvh flex-col group/modal'
		data-body-exit>
		<TitleHidden title={pageTitle} />
		<Header
			title={site.title}
			contactActions={site.contact_actions[0].links}
			nav={site.nav}
			showNav={showNav}
		/>
		<main
			class:list={[
				showActions && 'overflow-y-clip',
				'flex-1 swup-in pt-[var(--r-spacing-16)] lg:pt-[var(--r-spacing-20)]',
			]}
			id='swup'>
			<slot />
		</main>
		<Footer
			legalName={site.legalName}
			legalLinks={site.legalnav}
			social={site.social}
			actions={site.cta}
			showActions={showActions}
		/>
		<Modal>
			{
				_productsNew.value.map((el: any, idx: number) => (
					<ModalProduct
						item={el}
						data-modal-display={`product-at-${idx}`}
					/>
				))
			}
		</Modal>
		<Toast />
		<Sheet>
			<NavMobile data-sheet-display='nav-mobile' links={site.nav} />
		</Sheet>
		<Backdrop />
		<script src='@scripts/global.js'></script>
	</body>
</html>
