---
import Section from '@layouts/Section.astro'
import Wrapper from '@layouts/Wrapper.astro'
import CardProduct from '@blocks/CardProduct.astro'
import { _padY, _padB, _empty } from '@scripts/snips'
import _slug from '@scripts/slug'
import _slugify from '@scripts/slugify'
import StoryblokClient from 'storyblok-js-client'
import { PERPAGE } from '@scripts/constants'
import { _getVisibleItems } from '@scripts/get-visible-items'
import Pagination from '@blocks/Pagination.astro'
import TitleHidden from '@blocks/TitleHidden.astro'
import InputCheckboxChip from '@atoms/InputCheckboxChip.astro'
import InputButtonChip from '@atoms/InputButtonChip.astro'
import { useStoryblokApi } from '@storyblok/astro'

const storyblokApi = useStoryblokApi()

const { searchParams } = Astro.url
const partner = searchParams.get('partner') || ''
const search = searchParams.get('s') || ''
const currentPage = parseInt(searchParams.get('page') || '1', 10)
const pageSize = PERPAGE

let products = await storyblokApi.getAll('cdn/stories', {
	version: 'published',
	starts_with: 'products/',
	is_startpage: false,
	resolve_relations: 'product.partner',
})
let filteredProducts = products
	.filter((i) => i.content.in_stock)
	.sort((a, b) => b.content.is_new - a.content.is_new)

console.log(filteredProducts[0].content.partner)

const partners = [...new Set(products.map((i) => i.content.partner.name))]

if (partners.length > 0) {
	filteredProducts = filteredProducts.filter((product) =>
		partners.includes(product.content.partner.name),
	)
}

if (search) {
	const searchLower = search.toLowerCase()
	filteredProducts = filteredProducts.filter(
		(product) =>
			product.content.name.toLowerCase().includes(searchLower) ||
			product.content.description.toLowerCase().includes(searchLower),
	)
}

const totalProducts = filteredProducts.length
const totalPages = Math.ceil(totalProducts / pageSize)

const paginatedProducts = filteredProducts.slice(
	(currentPage - 1) * pageSize,
	currentPage * pageSize,
)

function getFilterUrl(updates) {
	const newParams = new URLSearchParams(searchParams)
	Object.entries(updates).forEach(([key, value]) => {
		if (value === null) {
			newParams.delete(key)
		} else {
			newParams.set(key, value)
		}
	})
	return `/products-filtered?${newParams.toString()}`
}

const isFiltered = partners.length > 0 || search !== ''
---

<Section title={'All Products (Filtered)'} component={'products-filtered'}>
	<!-- Product Filters -->
	<Wrapper tag='form' inner class='py-8 xs:py-12' id='filter-form'>
		<TitleHidden tag='h3' title={'Filter Products by OEM Partner'} />
		<ul class='flex flex-wrap gap-3'>
			{
				partners.map((i) => (
					<li>
						<InputCheckboxChip
							id={_slugify(i)}
							label={i}
							name={'partner'}
							value={i}
							checked={partners.includes(i)}
						/>
					</li>
				))
			}
			<li>
				<InputButtonChip id={'apply-filters'} label={'Apply'} />
			</li>
		</ul>
	</Wrapper>
	<Wrapper
		inner
		tag='ul'
		padB='b'
		class:list='w-full relative grid grid-cols-1 xs:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-3'
		data-all-products>
		<!-- Products Cards -->
		{
			paginatedProducts.length > 0 ? (
				paginatedProducts.map(({ content }, x) => (
					<CardProduct
						filename={content.image[0].file.filename}
						link={
							!_empty(content.link) && _slug(content.link[0].link)
						}
						name={content.name}
						isNew={content.is_new}
						data-modal-trigger={content.is_new}
						data-display={`product-at-${x}`}
						data-partner={_slugify(content.partner.name)}
					/>
				))
			) : (
				<p class='text-2xl text-center'>No results found</p>
			)
		}

		<!-- Pagination -->
		<nav aria-label='Pagination'>
			{
				currentPage > 1 && (
					<a
						href={getFilterUrl({
							page: (currentPage - 1).toString(),
						})}>
						Previous
					</a>
				)
			}
			{
				Array.from({ length: totalPages }, (_, i) => i + 1).map(
					(pageNum) => (
						<a
							href={getFilterUrl({ page: pageNum.toString() })}
							aria-current={
								currentPage === pageNum ? 'page' : undefined
							}>
							{pageNum}
						</a>
					),
				)
			}
			{
				currentPage < totalPages && (
					<a
						href={getFilterUrl({
							page: (currentPage + 1).toString(),
						})}>
						Next
					</a>
				)
			}
		</nav>
	</Wrapper>
</Section>

<script>
	const form = document.getElementById('filter-form')
	const applyButton = document.getElementById('apply-filters')
	// const resetButton = document.getElementById('reset-filters')
	const checkboxes = form.querySelectorAll('input[type="checkbox"]')
	// const searchInput = form.querySelector('input[name="s"]')

	function updateButtonVisibility() {
		const isAnyChecked = Array.from(checkboxes).some((cb) => cb.checked)
		applyButton.style.display = isAnyChecked ? 'inline-block' : 'none'
		// resetButton.style.display =
		// 	isAnyChecked || searchInput.value !== '' ? 'inline-block' : 'none'
	}

	checkboxes.forEach((cb) =>
		cb.addEventListener('change', updateButtonVisibility),
	)
	// searchInput.addEventListener('input', updateButtonVisibility)

	form.addEventListener('submit', function (e) {
		e.preventDefault()
		const formData = new FormData(this)
		const searchParams = new URLSearchParams()

		for (const [key, value] of formData.entries()) {
			if (key === 'partner' && value === 'on') continue
			searchParams.append(key, value)
		}

		window.location.href = `/products-filtered?${searchParams.toString()}`
	})

	// resetButton.addEventListener('click', function () {
	// 	checkboxes.forEach((cb) => (cb.checked = false))
	// 	searchInput.value = ''
	// 	updateButtonVisibility()
	// 	window.location.href = '/products-filtered'
	// })

	// Initial button visibility update
	// updateButtonVisibility()
</script>
