---
import Section from '@layouts/Section.astro'
import Wrapper from '@layouts/Wrapper.astro'
import CardProduct from '@blocks/CardProduct.astro'
import { _padY, _padB, _empty } from '@scripts/snips'
import _slug from '@scripts/slug'
import _slugify from '@scripts/slugify'
import { PERPAGE } from '@scripts/constants'
import { _getVisibleItems } from '@scripts/get-visible-items'
import Pagination from '@blocks/Pagination.astro'
import TitleHidden from '@blocks/TitleHidden.astro'
import InputCheckboxChip from '@atoms/InputCheckboxChip.astro'
import InputButtonChip from '@atoms/InputButtonChip.astro'
import InputSearch from '@atoms/InputSearch.astro'
import { getCollection, getEntry } from 'astro:content'

// Get all products and partners
const allProducts = await getCollection('products')
const allPartners = await getCollection('partners')

// Get query parameters
const {
	s: searchQuery,
	partner: partnerFilter,
	page: pageParam,
	in_stock: inStockFilter,
} = Astro.url.searchParams

// Resolve partner references for all products
const productsWithResolvedPartners = await Promise.all(
	allProducts.map(async (product) => {
		const resolvedPartner = await getEntry(product.data.partner)
		return { ...product, resolvedPartner }
	}),
)

// Filter products based on search query, partner filter, and in_stock
let filteredProducts = productsWithResolvedPartners

if (searchQuery) {
	filteredProducts = filteredProducts.filter(
		(product) =>
			product.data.title
				.toLowerCase()
				.includes(searchQuery.toLowerCase()) ||
			product.data.description
				.toLowerCase()
				.includes(searchQuery.toLowerCase()),
	)
}

if (partnerFilter) {
	filteredProducts = filteredProducts.filter(
		(product) => product.resolvedPartner.id === partnerFilter,
	)
}

if (inStockFilter === 'true') {
	filteredProducts = filteredProducts.filter(
		(product) => product.data.is_in_stock,
	)
}

// Sort products by is_new (new products first)
filteredProducts.sort((a, b) =>
	b.data.is_new === a.data.is_new ? 0 : b.data.is_new ? 1 : -1,
)

// Pagination
const productsPerPage = PERPAGE
const currentPage = pageParam ? parseInt(pageParam) : 1
const totalPages = Math.ceil(filteredProducts.length / productsPerPage)
const paginatedProducts = await Promise.all(
	filteredProducts
		.slice(
			(currentPage - 1) * productsPerPage,
			currentPage * productsPerPage,
		)
		.map(async (product) => {
			const partnerEntry = await getEntry(product.data.partner)
			return { ...product, resolvedPartner: partnerEntry }
		}),
)

// Generate pagination URLs
const generatePageUrl = (page) => {
	const url = new URL(Astro.url)
	url.searchParams.set('page', page.toString())
	return url.toString()
}
---

<Section title={'All Products (Filtered)'} component={'products-filtered'}>
	<!-- Product Filters -->
	<Wrapper tag='form' inner class='py-8 xs:py-12' id='filter-form'>
		<TitleHidden tag='h3' title={'Filter Products by OEM Partner'} />
		<div class='flex items-center justify-center pb-5'>
			<!-- <InputSearch name='s' value={search} /> -->
		</div>
		<div class='flex flex-wrap gap-3'>
			<!-- {
				partners.map((i) => (
					<InputCheckboxChip
						id={_slugify(i)}
						label={i}
						name={'partner'}
						value={i}
						checked={partners.includes(i)}
					/>
				))
			} -->
			<!-- <div class='flex gap-3'>
				<InputButtonChip id={'apply-filters'} label={'Apply'} />
				<InputButtonChip id={'reset-filters'} label={'Reset'} />
			</div> -->
		</div>
	</Wrapper>
	<Wrapper
		inner
		tag='ul'
		padB='b'
		class:list='w-full relative grid grid-cols-1 xs:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-3'
		data-all-products>
		<!-- Products Cards -->
		{
			paginatedProducts.length > 0 ? (
				paginatedProducts.map(({ data, resolvedPartner }, x) => (
					<CardProduct
						filename={data.image.src}
						link={data.links[0].slug}
						name={data.title}
						isNew={data.is_new}
						data-modal-trigger={data.is_new}
						data-display={`product-at-${x}`}
						data-partner={_slugify(resolvedPartner.data.title)}
					/>
				))
			) : (
				<p class='text-2xl text-center'>No results found</p>
			)
		}

		<!-- Pagination -->
		
	</Wrapper>
</Section>
