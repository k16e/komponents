---
export const prerender = false

import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro'
import Base from '@layouts/Base.astro'
import { _getPageData } from '@scripts/storyblok'
import { PERPAGE } from '@scripts/constants'
import { getCollection, getEntry } from 'astro:content'
import ProductsFiltered from '@composites/ProductsFiltered.astro'

const slug = Astro.url.pathname.slice(1)
const { page, content, meta } = await _getPageData(slug)

const products = await getCollection('products')
const partners = await getCollection('partners')

const allProducts = await Promise.all(
	products.map(async (product) => {
		const resolvedPartner = await getEntry(product.data.partner)
		return { ...product, resolvedPartner }
	}),
)

const pageParam = Astro.url.searchParams.get('page')
const searchQuery = Astro.url.searchParams.get('s')
const partnerFilter = Astro.url.searchParams.get('partner')
const partnerFilters = Astro.url.searchParams.getAll('partner')

let filteredProducts = allProducts

if (searchQuery) {
	filteredProducts = filteredProducts.filter(
		(product) =>
			product.data.title
				.toLowerCase()
				.includes(searchQuery.toLowerCase()) ||
			product.data.description
				.toLowerCase()
				.includes(searchQuery.toLowerCase()),
	)
}

if (partnerFilters.length > 0) {
	filteredProducts = filteredProducts.filter((product) =>
		partnerFilters.includes(product.resolvedPartner.id),
	)
} else if (partnerFilter) {
	filteredProducts = filteredProducts.filter(
		(product) => product.resolvedPartner.id === partnerFilter,
	)
}

filteredProducts.sort((a, b) =>
	b.data.is_new === a.data.is_new ? 0 : b.data.is_new ? 1 : -1,
)

const productsPerPage = PERPAGE
const currentPage = pageParam ? parseInt(pageParam) : 1
const totalPages = Math.ceil(filteredProducts.length / productsPerPage)
const paginatedProducts = filteredProducts.slice(
	(currentPage - 1) * productsPerPage,
	currentPage * productsPerPage,
)
const generatePageUrl = (pageNum) => {
	const url = new URL(Astro.request.url)
	url.searchParams.set('page', pageNum.toString())
	return url.toString()
}

const prevPage = currentPage > 1 ? generatePageUrl(currentPage - 1) : null
const nextPage =
	currentPage < totalPages ? generatePageUrl(currentPage + 1) : null
---

<Base
	pageTitle={meta.title}
	pageDescription={meta.description}
	pageThumbnail={meta.image.filename}>
	<StoryblokComponent blok={content} />
	<ProductsFiltered
		paginatedProducts={paginatedProducts}
		searchQuery={searchQuery}
		partners={partners}
		partnerFilter={partnerFilter}
		partnerFilters={partnerFilters}
		currentPage={currentPage}
		totalPages={totalPages}
		prevPage={prevPage}
		nextPage={nextPage}
	/>
</Base>
