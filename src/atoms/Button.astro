---
import Icon from '@atoms/Icon.astro'
import LinkText from '@atoms/LinkText.astro'
import { _transition } from '@scripts/snips'

const {
		icon,
		iconPosition,
		label,
		color,
		titleCase = false,
		responsive,
		fab,
		chip,
		eventsNone,
		tag = 'div',
		left,
		class: classes,
		...attrs
	} = Astro.props,
	Tag = tag,
	dimensions = (responsive, fab, chip, left) => {
		if (responsive) return 'h-11 px-3'
		else if (fab) return 'h-16 w-16 rounded-full'
		else if (chip) return 'px-2.5 py-1.5'
		else if (left) return 'h-[52px] pr-5'
		else return 'h-[52px] px-5'
	}
---

<Tag
	class:list={[
		'justify-center items-center gap-2 inline-flex',
		color === 'accent' &&
			`bg-accent-600 text-white
        group-[.disabled]/button:bg-dark-50 group-[.disabled]/button:text-surface-950/50
        group-[.disabled]/button:pointer-events-none group-[.active]/anchor:bg-dark-50
        group-[.active]/anchor:text-surface-950/50 group-[.active]/anchor:pointer-events-none
        focus:outline-none focus:ring focus:ring-accent-300`,
		color === 'surface' && 'bg-surface-100 text-surface-900',
		color === 'dark' && 'bg-dark-950 text-white',
		color === 'depth' && 'bg-surface-950 text-white',
		color === 'transparent' && 'bg-transparent',
		color === 'light_a' && 'bg-accent-50 text-accent-600',
		color === 'chip-default' && 'border-[0.09375rem] border-dark-200 hover:border-accent-600 hover:text-accent-600',
		eventsNone && 'pointer-events-none',
		dimensions(responsive, fab, chip, left),
		_transition(),
		classes,
	]}
	{...attrs}>
	{
		icon && (
			<Icon
				name={icon}
				class:list={[
					fab ? 'w-9 pointer-events-none' : 'w-6',
					iconPosition === 'leading' ? 'order-1' : 'order-2',
				]}
			/>
		)
	}
	{
		label && (
			<div
				class:list={[
					`justify-start items-start gap-2 flex`,
					iconPosition === 'leading' ? 'order-2 pr-1' : 'order-1',
				]}>
				<LinkText text={label} titleCase={titleCase} />
			</div>
		)
	}
</Tag>
